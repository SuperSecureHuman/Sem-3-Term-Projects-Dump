In our application, where we check if a given substring exists in the given string, we exploit what trie already exploits – Prefix search. Here, we insert​ ​all​ ​the​ ​substrings​ ​of​ ​the​ ​given​ ​string​ ​into​ ​the​ ​trie​ ​and​ ​then​ ​search​ ​for​ ​the​ ​given​ ​substring​ ​in​ ​the​ ​trie.​ ​If​ ​the​ ​substring​ ​is​ ​found,​ ​then​ ​the​ ​given​ ​substring​ ​exists​ ​in​ ​the​ ​string.​ ​If​ ​the​ ​substring​ ​is​ ​not​ ​found,​ ​then​ ​the​ ​given​ ​substring​ ​does​ ​not​ ​exist​ ​in​ ​the​ ​string.​ ​The​ ​time​ ​complexity​ ​of​ ​this​ ​algorithm​ ​is​ ​O(n2)​ ​where​ ​n​ ​is​ ​the​ ​length​ ​of​ ​the​ ​string.​ ​The​ ​space​ ​complexity​ ​of​ ​this​ ​algorithm​ ​is​ ​O(n2)​ ​where​ ​n​ ​is​ ​the​ ​length​ ​of​ ​the​ ​string.​ ​The​ ​space​ ​complexity​ ​is​ ​O(n2)​ ​because​ ​we​ ​are​ ​inserting​ ​all​ ​the​ ​substrings​ ​of​ ​the​ ​given​ ​string​ ​into​ ​the​ ​trie.​ ​The​ ​time​ ​complexity​ ​is​ ​O(n2)​ ​because​ ​we​ ​are​ ​inserting​ ​all​ ​the​ ​substrings​ ​of​ ​the​ ​given​ ​string​ ​into​ ​the​ ​trie.​ ​The​ ​time​ ​complexity​ ​can​ ​be​ ​improved​ ​to​ ​O(n)​ ​by​ ​using​ ​the​ ​KMP​ ​algorithm.​ ​The​ ​space​ ​complexity​ ​can​ ​be​ ​improved​ ​to​ ​O(n)​ ​by​ ​using​ ​the​ ​KMP​ ​algorithm.​ ​The​ ​KMP​ ​algorithm​ ​is​ ​discussed​ ​in​ ​the​